#!/usr/bin/env perl

use strict;
use warnings;

use Data::Dumper;

sub progdir {
  my @elements = split(qr(/), $_[0] || "$0");
  my ($dir, $file) = (join('/', @elements[0..-1]), $elements[-1]);
  return $dir if substr($dir, 0, 1) eq '/';
  my @paths = split(/[:;]/, $ENV{PATH}.":."); # append current directory
  for my $path (@paths) {
    if (-x "$path/$file") {
      return $path;
    }
  }
  return $dir;
}

require (progdir()."/args.pm");

sub writefile {
  my ($filename, $content) = @_;
  open(my $fh, ">", $filename) || die "ERROR: Could not create file: $filename: $!\n";
  print $fh $content;
  close($fh);
}

# Match the regex on the command line and print out what is matched,
# including captures

my @precanned = <DATA>;

my $Options = new Args(
  {
    help => {
      help => "extract: Extract elements of text, and print them out in adjusted/altered format
Usage: cat textfile.txt | extract [options] extractor extractor extractor extractor ...
   extractors are specified by 'name:name:name:regex' and options are shown in the list below.
   extractor name:age:name=(.+?) age=(\\d+) would be applied to each line of input, and if the regex matched, the two captures would be stored in 'name' and 'age' and in the --output format, like 'person \@name\@ is \@age\@ years old'
   Example: cat textfile.txt | extract --empty NODATA --junk 1 'first:second:age:name=(.*?) (.*?) age=([0-9]+)'  'account:date:account_no=(/d+) since=([0-9/])'
   Note: to specify modifiers like case-insensitivity you must use in-line options like (?^i) https://perldoc.perl.org/perlre#Extended-Patterns
"
    },	
    output => {
      help => "Format to output all the collected data from each line (defaults to all your extracts, separated by space)",
      value => "" 
    },
    Original => {
      help => "Output original line before extraction (useful for debugging)",
      value => "0" 
    },
    sprintf => {
      help => "Use sprintf style format specifiers, see https://perldoc.perl.org/functions/sprintf, but put \@variable\@ names in the --output format instead of %s, example %\@var1\@, %-20\@var2\@",
      value => "" 
    },
    annotate => {
      help => "Annotate the \@variable\@ instead of replacing, i.e show the variable name with the value after it like name=value",
      value => "0" 
    },
    filter => {
      help => "Only process lines that contain this regex (however line numbers increment even for excluded lines). This is to enable locating lines in source material",
      value => "" 
    },
    pre => {
      help => "Load a preconfigured extraction, use empty -p to get a list, look at bottom of $0 in the __DATA__ section, add your own if you want",
      value => ""
    },
    Progress => {
      help => "show a count as items are being processed",
      value => "0"
    },
    Header => {
      help => "Add a header line defining the output variables. Use your own, leave empty, or use \"output\" to reuse either --output or --sprintf formats (-H output)",
      value => ""
    },
    missing => {
      help => "If a value can't be extracted, set its value to this",
      value => "None"
    },
    empty => {
      help => "If the extracted value is an empty string, use this value",
      value => ""
    },
    delimiter => {
      help => "If multiple items are captured under the same variable name, join them into single string separated by this",
      value => " "
    },
    Multiple => {
      help => "Capture multiple instances of regex match if they exist (see delimiter)",
      value => "1"
    },
    junk => {
      help => "Discard empty lines immediately (lineno still counts the empty lines to help track down problematic lines)",
      value => "1"
    },
    verbose => {
      help => "Print extra data (1=errors, 2=warnings, 3=normal, 4=more, 5=unexpected, 6=all), example: --verbose 4 prints all messages of priority 4,3,2 and 1",
      value => "3"
    },
    Version => {
      help => "Show version information",
      value => "git_info:"
    },
    now => {
      help => "Local time",
      value => "",
      action => sub { print "VALUE:", $_[0], "\n"; return int($_[0]) * 2;}
    },
    '' => {
      label => "extractors",
      help => '1 or more extraction regexes name1:name2:name3:(\S+)\s+(\S+)\s+(\S+), example \"name,age,sex,name=(\S+).*?age=(\S+).*?sex=(\S)\" would match each line of input for each extractor regex, and the captures would be stored as name, age and sex. In the output, you can put @name@ @age@ or @sex@, wherever you want that thing to appear, like \"This person is named:@name@, sex is @sex@ and is @age@ years old',
      values => []  #extract paragraphs
    }
  },
  join('', @precanned)
);

if ($Options->{pre} eq "1") {
  print "Precanned Extractions:\n";
  print grep {/^\s*\[(.+)\]/} @precanned;
  exit 0;
}

sub message {
  my $priority = shift;
  return if ($priority > $Options->{verbose});
  print "\n" if $priority < 5;
  my ($pack, $file, $line) = caller;
  print $priority > 4 ? "   " x ($priority - 4) : "", "-- $pack:$line:", @_, "\n";
}

my $index = 0;

my @transforms = ();
for my $scanner(@{$Options->{''}}) {
  my ($DEL) = $scanner =~ /([^a-zA-Z0-9_])/; # the first nonalpha character will be the delimiter for names
  message(7, "scanner$DEL$scanner");
  my @names = $scanner =~ /(?:([a-z][a-z0-9_]*)$DEL)/g;  # grab all : delimited "named"
  my ($extractor) = $scanner =~ qr/$DEL([^$DEL]+)$/;
  die "ERROR: No extractor in $scanner" unless defined $extractor;
  message(6, "names:[", "@names", "] extractor:", $extractor);
  eval {
    push (@transforms, [\@names, qr/$extractor/]); # an array of arrays
  };
  die "ERROR: problem $@ with regex in $scanner" if $@;
  
  #if no output specified, generate a default one
  if (!$Options->{output}) {
    $Options->{output} = "\@lineno\@ ";
    for (@names) {
      $Options->{output} .= " \@$_\@";
    }		
    $Options->{output} .= "\n";
  }
}	

message(6, "output format: ", $Options->{output});

# set up some global values
my $Sprintf = $Options->{sprintf} =~ s/(\@[a-z][a-z0-9_]+\@)/s/gr;  # replace the key names with %s (string placeholder)
my $Header = $Options->{Header};   # if user wants a first line that describes the format of the output

if ($Header eq "output") {
  $Header = $Options->{output} || $Options->{sprintf};  # if output is the header, use the output or sprintf format to create a descriptive line
}

if ($Header) {
  $Header =~ s/\@(.+?)\@/$1/g;  # replace all "@name@" with just "name"
  if ($Sprintf) { # if using sprintf, generate an appropriate header
    my @keys = $Options->{sprintf} =~ /\@([a-z][a-z0-9_]+)\@/g; # extract all the key names
    $Header = sprintf($Sprintf, @keys); # stick the values back into where the names were
  }
  print $Header;
}	

my $file = __FILE__;
print STDERR "Waiting for input on standard in (use $file -h for help):\n";

my $Linenumber = 0;
while (my $content = <STDIN>) {
  $Linenumber++;
  next if $content !~ /\S/;
  next if $Options->{filter} && $content !~ $Options->{filter};
  print STDERR "$Linenumber\r" if $Options->{Progress} && $Linenumber % 10 == 0;
  print $content if $Options->{Original};
  chomp($content);
  message(4, "$Linenumber)", $content);

  my %data = ();
  # extract elements by regex into their respective hash key values
  for my $tr (@transforms) {  # each $tr is [\@names, $extractor_regex]
    message(7, "transform keys:(@{$tr->[0]}) extractor:", $tr->[1]);
    my @captures;
    if ($Options->{Multiple}) {
      @captures = $content =~ /$tr->[1]/g;
    } else {
      @captures = $content =~ /$tr->[1]/;
    }
    my @keys = @{$tr->[0]}; # a scanner can have multiple keys it's looking for like "key1:key2:key3:(.*?);"
    message(5, "keys(@{$tr->[0]}) extractions(@captures)");
    for my $i (0 .. scalar @{$tr->[0]} - 1) {
      my $key = $keys[$i];
      die "ERROR: Extractor names must be at least two characters: $key" if length($key) < 2;
      my $capture = undef;

      # last key gets ALL remaining captures (used to capture unknown number of elements)
      if ($i == $#keys) {
	if (!@captures) {
	  $capture = $Options->{missing};
	} else {
	  $capture = join($Options->{delimiter}, @captures);
	}		
      } else {
	$capture = shift @captures; # remove captures from the list one by one
      }
      
      if (!defined $capture) {
	$data{$key} = $Options->{missing};
      } elsif ($capture eq "") {
	$data{$key} = $Options->{empty};
      } else {
	$data{$key} = $capture;
      }
      message(6, "$key=$data{$key}");
    }
  }

  $data{'line'} = $content;
  $data{'lineno'} = $Linenumber;

  if ($Options->{sprintf}) {
    # extract the variable names, look up their values in %data and store those values in @values
    my @values = map {$data{$_}} $Options->{sprintf} =~ /\@([a-z][a-z0-9_]+)\@/g; # extract all the key names
    message(6, "Values: @values");
    print sprintf($Sprintf, @values); # stick the values back into where the names were
    next;
  }

  my $outline = $Options->{output};
  while (my ($name, $capture) = each(%data)) {
    if ($Options->{annotate}) {
      $outline =~ s/\@${name}\@/$name=$capture/g;
    } else {
      $outline =~ s/\@${name}\@/$capture/g;
    }
  }
  
  print $outline;
}	

print STDERR "$Linenumber lines processed\n" if $Options->{Progress};

# Perl lets you put data right into a script file that can be read as a stream or string
# in this case we are  using it for pre-canned, stored extraction parameters. Add
# your own just follow the format [name] with parameters (same as command) following each
# on a separate line. Access with --pre

__DATA__
[clickquery2.tsv] # extract data from tab delimited created with query tools (Stephanie Ho)

# syntax of extractors
# name[delimiter]name[delimiter]name[delimiter]regex with capture(s)
# any non alphanumeric character can be used as delimiter
# choose a delimiter that will not appear in the regex.
# multiple names require multiple captures, first:second:my name is (.+?) +(.+)  or first@second@my name is (?^:)([a-z]+)\s+(a-z)
# regex modifiers characters like "iexs" etc must be specified inline, with (?^modifiers:)  like (?^i) to turn on case insensitivity
# the extracted data is stored under  name:value and the --output string replaces each @name@ with its corresponding value
# like --output "my name is @first@ @second@", each input line will be replaced with an --output line with the values replaced

date:uuidcreation:uuid:uuidsource:url:agent:referer:([^\t]*)\t([^\t]*)\t([^\t]*)\t([^\t]*)\t([^\t]*)\t([^\t]*)\t([^\t]*)
inapp:mt_inapp=(\d)
type,\t(/[^?]+)
mt_aid:mt_aid=(\d+)
mt_uuid:mt_uuid=([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})
mt_adid:mt_adid=(\d+)
mt_exid:mt_exid=(\d+)
redirect:redirect=(\S+)          # all they way to end of URL
redir:redir=([^&]+)
mt_3pck:mt_3pck=([^&]+)
mt_lp:mt_lp=([^&]+)
--Multiple 0
--missing NULL
--empty EMPTY
--Header output
--output '"@lineno@","@date@","@type@","@mt_aid@","@inapp@","@uuidcreation@","@uuid@","@uuidsource@","@url@","@redirect@","@agent@","@referer@","@mt_uuid@","@mt_adid@","@mt_exid@","@mt_3pck@","@mt_lp@","END"\n'

[clickqubole] # extract data from tab delimited created with query tools (Stephanie Ho)

uuidcreation:uuid:uuidsource:url:agent:referer:\t(.*?)\t(.*?)\t(.*?)\t(.*?)\t(.*?)\t(.*?)\t
inapp:mt_inapp=(\d)
month,day,year,time,^([0-9]+)/([0-9]+)/([0-9]+)\s+([0-9:]+)
type,\t(/[^?]+)
mt_aid:mt_aid=(\d+)
mt_uuid:mt_uuid=([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})
mt_adid:mt_adid=(\d+)
mt_exid:mt_exid=(\d+)
#bot:(?^i:[a-z]*crawler|bot|scan[a-z]*)
redirect:redirect=(\S+)          # all they way to end of URL
redir:redir=([^&]+)
mt_3pck:mt_3pck=([^&]+)
mt_lp:mt_lp=([^&]+)
--Multiple 0
--missing NULL
--empty EMPTY
--Header output
--output '"@lineno@","@year@-@month@-@day@ @time@","@type@","@mt_aid@","@inapp@","@uuidcreation@","@uuid@","@uuidsource@","@url@","@redirect@","@agent@","@referer@","@mt_uuid@","@mt_adid@","@mt_exid@","@bcache@","@mt_3pck@","@mt_lp@","END"\n'

[clicktab] # extract data from tab delimited 

ipaddress:host:uuidcreation:uuid:uuidsource:url:agent:referer:junk1:junk2:cid:misc:\t(.*?)\t(.*?)\t(.*?)\t(.*?)\t(.*?)\t(.*?)\t(.*?)\t(.*?)\t(.*?)\t(.*?)\t(.*?)
inapp:mt_inapp=(\d)
when,^([0-9-]{10}\s[0-9]{2}:[0-9]{2}:[0-9]{2})\t  # example: 2022-02-15 02:08:53
doc,\t(/[^?]+)
mt_aid:mt_aid=(\d+)
#uuid:\t([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\t6
mt_uuid:mt_uuid=([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})
#url:\t(/.+?)\t
#ipaddress:\t([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})\t
mt_adid:mt_adid=(\d+)
mt_exid:mt_exid=(\d+)
#bot:(?^i:[a-z]*crawler|bot|scan[a-z]*)
#referer,Referer:\t(http.+?)\t
bcache:bidder_cache=([^&]+)
#agent,\t(Mozilla.+?)\t
redirect:redirect=(\S+)          # all they way to end of URL
redir:redir=([^&]+)
mt_3pck:mt_3pck=([^&]+)
mt_lp:mt_lp=([^&]+)
--Multiple 0
--missing NULL
--empty EMPTY
--Header output
--output '"@lineno@","@when@","@doc@","@mt_aid@","@inapp@","@uuidcreation@","@uuid@","@uuidsource@","@ipaddress@","@url@","@redirect@","@agent@","@referer@","@mt_uuid@","@mt_adid@","@mt_exid@","@bcache@","@mt_3pck@","@mt_lp@","@misc@","END"\n'

[clicktrack] # extract data from clicks, and click trackers from MT3 logs

inapp:mt_inapp=(\d)
when,^([0-9-]{10}\s[0-9]{2}:[0-9]{2}:[0-9]{2})\t  # example: 2022-02-15 02:08:53
doc,\t(/[^?]+)
mt_aid:mt_aid=(\d+)
uuid:\t([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})\t
mt_uuid:mt_uuid=([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})
url:\t(/.+?)\t
ipaddress:\t([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})\t
mt_adid:mt_adid=(\d+)
mt_exid:mt_exid=(\d+)
#bot:(?^i:[a-z]*crawler|bot|scan[a-z]*)
referer,Referer:\t(http.+?)\t
bcache:bidder_cache=([^&]+)
agent,\t(Mozilla.+?)\t
redirect:redirect=(\S+)          # all they way to end of URL
redir:redir=([^&]+)
mt_3pck:mt_3pck=([^&]+)
mt_lp:mt_lp=([^&]+)
--Multiple 0
--missing NULL
--empty EMPTY
--Header output
#--output "@lineno@","@when@","@doc@","@mt_aid@","@uuid@","@ipaddress@","@url@","@redirect@","@agent@","@referer@","@mt_uuid@","@inapp@","@bot@","@mt_adid@","@mt_exid@","@bcache@","@mt_3pck@","@mt_lp@"\n
--output "@lineno@","@agent@\n"#,"@referer@","@mt_uuid@","@inapp@","@bot@","@mt_adid@","@mt_exid@","@bcache@","@mt_3pck@","@mt_lp@"\n

[clickscsv] # extract and format click requests into CSV format for import into Excel

inapp:mt_inapp=(\d)
time,\s*([0-9]{2}:[0-9]{2}:[0-9]{2})
date,T\s*([0-9/]{10})
mt_aid:mt_aid=(\d+)
cookie,(?^i)cookie:.+?uuid=([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})
mt_uuid:mt_uuid=([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})
ipaddress,X-Forwarded-For:\s*([0-9.]+)
mt_adid:mt_adid=(\d+)
mt_exid:mt_exid=(\d+)
bot!(?^i:[^@]*(?:crawler|bot).{0,8}:[^@]{1,20})
url:GET\s+(.+?)\s
referer,Referer:\s*(.+?)@
bcache:bidder_cache=([^&]+)
agent,Agent:\s*(.+?)@
redirect:redirect=(\S+)          # all they way to end of URL
redir:redir=([^&]+)
mt_3pck:mt_3pck=([^&]+)
mt_lp:mt_lp=([^&]+)
--missing NULL
--empty EMPTY
--Header output
--output "@lineno@","@date@-@time@","@mt_aid@","@cookie@","@mt_uuid@","@inapp@","@ipaddress@","@bot@","@mt_adid@","@mt_exid@","@bcache@","@url@","@agent@","@referer@","@mt_3pck@","@mt_lp@","@redirect@"\n

[missing] # extract and format click requests into CSV format for import into Excel
time,\s*([0-9]{2}:[0-9]{2}:[0-9]{2})
date,T\s*([0-9/]{10})
exch_aid,exch_aid=(.*?)&
missing,missing
cookie,([Cc]ookie:.+?uuid=[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})
mt_uuid:(mt_uuid=[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})
--missing NULL
--empty EMPTY
--output 'lineno:@lineno@ date:@date@ time:@time@ exch_aid:@exch_aid@ missing:@missing@ cookie:@cookie@ mt_uuid:@mt_uuid@\n'

[clickstab]
inapp:mt_inapp=(\d)
time,\s*([0-9]{2}:[0-9]{2}:[0-9]{2})
date,T\s*([0-9/]+)
mt_aid:mt_aid=(\d+)
mt_adid:mt_adid=(\d+)
mt_exid:mt_exid=(\d+)
get:GET\s+(.+?)\s
referer,Referer:\s*([^@]+)
cookie,[Cc]ookie:.+?uuid=([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})
mt_uuid:mt_uuid=([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})
bcache:bidder_cache=([^&]+)
agent,[Aa]gent:\s*([^@]+)
redirect:redirect=([^&]+)
redir:redir=([^&]+)
mt_3pck:mt_3pck=([^&]+)
mt_lp:mt_lp=([^&]+)
--missing NULL
--output @lineno@\t@date@-@time@\t@mt_aid@\tcookie:@cookie@\t@mt_uuid@\t@inapp@\t@mt_adid@\t@mt_exid@\t@bcache@\turl:@get@\t@agent@\t@referer@\t@redirect@\t@redir@\t@mt_3pck@\t@mt_lp@\n

[fclicks] # extract elements from ntrep captured click requests
inapp:mt_inapp=(\d)
time, ([0-9]{2}:[0-9]{2}:[0-9]{2})
date,T ([0-9/]+)
mt_aid:mt_aid=(\d+)
get:GET (.+)
cookie,[Cc]ookie: uuid=([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})
mt_uuid:mt_uuid=([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})
--sprintf %8@lineno@)\t%-8@date@ %-8@time@\tcookie:%-40@cookie@\tmt_uuid:%-40@mt_uuid@\tmt_aid:%-20@mt_aid@\tinapp:%2@inapp@%@get@\n
# every separate element of command line, must be on it's own line, i.e. " " must be \n in config files

[clicks] # extract elements from ntrep captured click requests
get,GET (.+)
mt_aid:mt_aid=(\d+)
cookie_uuid,[Cc]ookie: uuid=([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})
mt_uuid:mt_uuid=([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})
inapp:mt_inapp=(\d)
--output \n\n@lineno@)\t@get@\n\tcookie_uuid:\t@cookie_uuid@\n\tmt_uuid:\t@mt_uuid@\n\tmt_aid: \t@mt_aid@\n\tinapp:@inapp@
# every separate element of command line, must be on it's own line, i.e. " " must be \n in config files

[clicklogs] #  extract data from pixel log files
--output mt_aid,mt_aid=(\d+)
cookie_uuid|[Cc]ookie: uuid=([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})
mt_uuid|mt_uuid=([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})


